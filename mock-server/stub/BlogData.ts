import { Blogs } from "@/domain/models/Blog/Blog";

export const BlogList: Blogs = {
  "contents": [
    {
      "id": "rhb5wym6m14",
      "toc_visible":true,
      "createdAt": "2022-05-06T09:51:57.741Z",
      "updatedAt": "2022-05-06T09:51:57.741Z",
      "publishedAt": "2022-05-06T09:51:57.741Z",
      "revisedAt": "2022-05-06T09:51:57.741Z",
      "title": "Next.js / React.jsでStripe実装",
      "author": "S.Sekine",
      "contents": "<p>こんにちわ！<br>WebエンジニアのSekineです。<br></p><h2 id=\"h9707d3a59a\">概要</h2><ul><li>タイトルにある通り、ReactでStripe決済するためのクレジットカード登録の処理実装をしました</li><li>処理方式としては、フロントエンドとStripeで完結させるのではなく、Stripeから生成されたトークンを取得し、それをバックエンドのAPIに渡します</li><li>バックエンド処理にて、そのトークンでStripeへクレジットカード登録という方式にしたかったので、そのように実装してみました</li><li>UIに関しては、デザイナーがデザインした内容で実装したいため、ライブラリが提供している<code>CardElement</code>をそのままコンポーネントとして、使うのではなく、分割されている下記のコンポーネントを組み合わせて実装しました<ul><li><code>CardNumberElement</code>：カード番号</li><li><code>CardExpiryElement</code>：有効期限</li><li><code>CardCvcElement</code>：セキュリティコード</li></ul></li></ul><p><br></p><h2 id=\"ha5768c1f73\">開発ドキュメント</h2><ul><li><a href=\"https://stripe.com/docs/stripe-js/react\" target=\"_blank\" rel=\"noopener noreferrer\">公式サイト</a>を参考にしながら、実装しました</li></ul><p><br></p><h2 id=\"hd806df4f8c\">UI</h2><p><img src=\"https://images.microcms-assets.io/assets/e49c71d8e1b34655805aded5af66fa22/ad29def141c942fcbcbe46e012439129/stripe-ui.png\" alt=\"\"><br></p><h2 id=\"h03726fb0df\">技術スタック</h2><ul><li>Next.js</li><li>React.js</li><li>Tailwind CSS</li></ul><p><br></p><h2 id=\"hbd0e2d4f9e\">ソースコード抜粋</h2><h3 id=\"hc4f63f69b3\">ライブラリから必要なものをインポート</h3><pre><code>import {\n  CardCvcElement,\n  CardExpiryElement,\n  CardNumberElement,\n  useElements,\n  useStripe,\n} from \"@stripe/react-stripe-js\";\nimport {\n  StripeCardCvcElementChangeEvent,\n  StripeCardExpiryElementChangeEvent,\n  StripeCardNumberElementChangeEvent,\n} from \"@stripe/stripe-js\";</code></pre><p><br></p><h3 id=\"h09830411ab\">チェンジイベントでエラーを捕捉し、エラーメッセージ表示用のローカルstateを定義</h3><pre><code>  const [state, setErrors] = useState&lt;{\n    cardNumberElementErrorMessage: string;\n    cardExpiryElementErrorMessage: string;\n    cardCvcElementErrorMessage: string;\n    formSubmitErrorMessage: string;\n  }&gt;({\n    cardNumberElementErrorMessage: \"\",\n    cardExpiryElementErrorMessage: \"\",\n    cardCvcElementErrorMessage: \"\",\n    formSubmitErrorMessage: \"\",\n  });\n\n\n  const onChangeCardNumberElement = (e: StripeCardNumberElementChangeEvent) =&gt; {\n    if (e.error) {\n      const cardNumberElementErrorMessage = e.error.message;\n      setErrors((prev) =&gt; ({\n        ...prev,\n        cardNumberElementErrorMessage,\n      }));\n    } else {\n      setErrors((prev) =&gt; ({\n        ...prev,\n        cardNumberElementErrorMessage: \"\",\n      }));\n    }\n  };\n\n\n  const onChangeCardExpiryElement = (e: StripeCardExpiryElementChangeEvent) =&gt; {\n    if (e.error) {\n      const cardExpiryElementErrorMessage = e.error.message;\n      setErrors((prev) =&gt; ({\n        ...prev,\n        cardExpiryElementErrorMessage,\n      }));\n    } else {\n      setErrors((prev) =&gt; ({\n        ...prev,\n        cardExpiryElementErrorMessage: \"\",\n      }));\n    }\n  };\n\n\n  const onChangeCardCvcElement = (e: StripeCardCvcElementChangeEvent) =&gt; {\n    if (e.error) {\n      const cardCvcElementErrorMessage = e.error.message;\n      setErrors((prev) =&gt; ({\n        ...prev,\n        cardCvcElementErrorMessage,\n      }));\n    } else {\n      setErrors((prev) =&gt; ({\n        ...prev,\n        cardCvcElementErrorMessage: \"\",\n      }));\n    }\n  };</code></pre><p><br></p><h3 id=\"hd2bab8a21f\">カード情報入力用のパーツ</h3><pre><code>              &lt;CardNumberElement\n                onChange={onChangeCardNumberElement}\n                className={\n                  \"col-span-12 md:col-span-8 xl:col-span-5 xl:col-start-4 mt-1 xl:mt-0 h-8 border-0.5 form-input border-gray-darkest\"\n                }\n              /&gt;\n              {state.cardNumberElementErrorMessage &amp;&amp; (\n                &lt;div\n                  className={\n                    \"col-span-12 md:col-span-8 xl:col-span-3 mt-1 text-xs text-red-vivid\"\n                  }\n                &gt;\n                  {state.cardNumberElementErrorMessage}\n                &lt;/div&gt;\n              )}\n\n...\n\n              &lt;CardExpiryElement\n                onChange={onChangeCardExpiryElement}\n                className={\n                  \"col-span-3 md:col-span-4 xl:col-span-2 xl:col-start-4 mt-1 xl:mt-0 md:mr-10 h-8 border-0.5 form-input border-gray-darkest\"\n                }\n              /&gt;\n              {state.cardExpiryElementErrorMessage &amp;&amp; (\n                &lt;div\n                  className={\n                    \"col-span-12 md:col-span-8 xl:col-span-3 mt-1 text-xs text-red-vivid\"\n                  }\n                &gt;\n                  {state.cardExpiryElementErrorMessage}\n                &lt;/div&gt;\n              )}\n\n...\n\n              &lt;CardCvcElement\n                onChange={onChangeCardCvcElement}\n                className={\n                  \"col-span-3 md:col-span-4 xl:col-span-2 xl:col-start-4 mt-1 xl:mt-0 md:mr-10 h-8 border-0.5 form-input border-gray-darkest\"\n                }\n              /&gt;\n              {state.cardCvcElementErrorMessage &amp;&amp; (\n                &lt;div\n                  className={\n                    \"col-span-12 md:col-span-8 xl:col-span-3 mt-1 text-xs text-red-vivid\"\n                  }\n                &gt;\n                  {state.cardCvcElementErrorMessage}\n                &lt;/div&gt;\n              )}</code></pre><p><br></p><h3 id=\"hfcc1946a7e\">ボタン押下時にstripeが提供している要素を取得して、トークン生成依頼メソッドの引数に渡して、実行する</h3><pre><code>  const stripe = useStripe();\n  const elements = useElements();</code></pre><ul><li>メソッド呼び出し、要素取得時に必要なため、変数へ代入</li></ul><p><br></p><pre><code>  const onSubmit: FormEventHandler = async (event) =&gt; {\n    event.preventDefault();\n\n\n    const cardNumberElement = elements?.getElement(\"cardNumber\");\n    if (!stripe || !cardNumberElement) {\n      return;\n    }\n\n\n    const { error, token } = await stripe.createToken(cardNumberElement);\n    console.log(\"error:\", error);\n    if (error &amp;&amp; error.message) {\n      const formSubmitErrorMessage = error.message;\n      setErrors((prev) =&gt; ({\n        ...prev,\n        formSubmitErrorMessage,\n      }));\n    } else {\n      setErrors((prev) =&gt; ({\n        ...prev,\n        formSubmitErrorMessage: \"\",\n      }));\n    }\n    if (!token) return;\n\n\n    // TODO：トークンをBEへpostする\n  };</code></pre><p><br></p><ul><li>tokenのレスポンスとしては、下記のようなJSONが返却されますので、BEは、idの値をpostすればOKということになります！</li></ul><p><br></p><pre><code>{\n&nbsp; \"id\": \"tok_1Kw2Rxxxxxxxxxxxx\",\n&nbsp; \"object\": \"token\",\n&nbsp; \"card\": {\n&nbsp; &nbsp; \"id\": \"card_1Kw2Rkxxxxxxxxxxx\",\n&nbsp; &nbsp; \"object\": \"card\",\n&nbsp; &nbsp; \"address_city\": null,\n&nbsp; &nbsp; \"address_country\": null,\n&nbsp; &nbsp; \"address_line1\": null,\n&nbsp; &nbsp; \"address_line1_check\": null,\n&nbsp; &nbsp; \"address_line2\": null,\n&nbsp; &nbsp; \"address_state\": null,\n&nbsp; &nbsp; \"address_zip\": null,\n&nbsp; &nbsp; \"address_zip_check\": null,\n&nbsp; &nbsp; \"brand\": \"Visa\",\n&nbsp; &nbsp; \"country\": \"US\",\n&nbsp; &nbsp; \"cvc_check\": \"unchecked\",\n&nbsp; &nbsp; \"dynamic_last4\": null,\n&nbsp; &nbsp; \"exp_month\": 12,\n&nbsp; &nbsp; \"exp_year\": 2032,\n&nbsp; &nbsp; \"funding\": \"credit\",\n&nbsp; &nbsp; \"last4\": \"4242\",\n&nbsp; &nbsp; \"name\": null,\n&nbsp; &nbsp; \"tokenization_method\": null\n&nbsp; },\n&nbsp; \"client_ip\": \"xxx.xx.xxx.xx\",\n&nbsp; \"created\": 1651748532,\n&nbsp; \"livemode\": false,\n&nbsp; \"type\": \"card\",\n&nbsp; \"used\": false\n}</code></pre><p><br>こんな感じです！<br>Stripeの公式サイト、APIリファレンス、提供ライブラリをとっても、とてもわかりやすかったです！！<br><br>最後までお読みいただきまして、ありがとうございました！<br><br>弊社では、エンジニアを募集しています！是非、一緒に良いプロダクトを作りませんか？？<br><a href=\"https://www.matisse.co.jp/\" target=\"_blank\" rel=\"noopener noreferrer\">株式会社マチス教育システム</a>まで<br></p>",
      "featuredImage": {
        "url": "https://images.microcms-assets.io/assets/e49c71d8e1b34655805aded5af66fa22/e4e5e55ef70d438682f6175f69bc1fec/stripe%26react.png",
        "height": 190,
        "width": 381,
      },
      "categories": [
        {
          "id": "technology-introduction",
          "createdAt": "2022-04-10T06:33:02.126Z",
          "updatedAt": "2022-04-10T06:33:02.126Z",
          "publishedAt": "2022-04-10T06:33:02.126Z",
          "revisedAt": "2022-04-10T06:33:02.126Z",
          "categoryName": "技術紹介",
        },
      ],
      "tags": [],
      "metaDesc": "タイトルにある通り、ReactでStripe決済するためのクレジットカード登録の処理実装をしました。"
    },
    {
      "id": "6imrnm0utd1",
      "toc_visible":false,
      "createdAt": "2022-05-02T00:37:56.955Z",
      "updatedAt": "2022-05-02T00:40:53.600Z",
      "publishedAt": "2022-05-02T00:38:07.537Z",
      "revisedAt": "2022-05-02T00:40:53.600Z",
      "title": "サーバサイドKotlinでStripe決済実装",
      "author": "S.Sekine",
      "contents": "<p>こんにちわ。WebエンジニアのSekineです。<br><br>ECサイトの決済手段として、クレジットカードを提供するため、<a href=\"https://stripe.com/jp\" target=\"_blank\" rel=\"noopener noreferrer\">Stripe</a>を選定しました。<br></p><h3 id=\"h03726fb0df\">技術スタック</h3><ul><li>Kotlin</li><li>Spring Boot</li></ul><p><br></p><h3 id=\"hb9839ad71f\">ライブラリ</h3><ul><li>Kotlin用のSDKが見当たらなかったので、どうすれば良いのかと最初思ったのですが、Javaを利用すれば問題ありませんでした</li><li><a href=\"https://stripe.com/docs/api\" target=\"_blank\" rel=\"noopener noreferrer\">こちら</a>のAPIドキュメントを参照し、本開発環境は、<span style=\"color:#333333;background-color:#ffffff\">gradleなので、下記のように設定しました</span></li></ul><p><br></p><pre><code>implementation(\"com.stripe:stripe-java:20.116.0\")</code></pre><p><br></p><h3 id=\"hc4a03a72d4\">初期化処理の実装</h3><h4 id=\"haf9745e784\">APIキーの設定</h4><p><br>application.yml</p><pre><code>stripe:\n&nbsp; secretApiKey: sk_test_xxxxx</code></pre><ul><li>Stripe管理画面のシークレットキー</li></ul><p><br></p><h4 id=\"h01a1271be2\">初期化処理</h4><ul><li>StripePropertiesを読み込み、bootRun起動時にStripeの初期化処理を実行する</li></ul><pre><code>@Component\nclass StripeConfig(private val stripeProperties: StripeProperties) {\n    @PostConstruct\n    fun initAfterStartup() {\n        Stripe.apiKey = stripeProperties.secretApiKey\n    }\n}</code></pre><p><br></p><h3 id=\"hdedf5031a2\">アプリケーションサービス層</h3><h4 id=\"ha0d465b50d\">interface</h4><pre><code>interface IStripeService {\n    fun getStripePaymentMethods(stripePaymentMethodGetCommand: StripePaymentMethodGetCommand): StripeCardDto\n    fun saveStripePaymentMethod(stripePaymentMethodSaveCommand: StripePaymentMethodSaveCommand)\n    fun updateStripePaymentMethod(stripePaymentMethodUpdateCommand: StripePaymentMethodUpdateCommand)\n    fun detachStripePaymentMethod(stripePaymentMethodDetachCommand: StripePaymentMethodDetachCommand)\n    fun chargeCustomerCard(stripeChargeCustomerCardCommand: StripeChargeCustomerCardCommand)\n}</code></pre><ul><li>クレジットカード情報のCRUD及び支払い処理のメソッドを定義</li><li>Stripeの実装には関係ありませんが、本開発PJでは、DDDを採用しておりますので、コマンドオブジェクトを活用しています</li><li>StripeのAPIは、<a href=\"https://stripe.com/docs/api\" target=\"_blank\" rel=\"noopener noreferrer\">こちら</a>にあるので、開発に際して、API及び困った際には、JavaのSDK（stripe-java）のコードを見て、実装したい処理に対して、どのAPIをコールすれば良いのかを調べて、実装しました</li></ul><p><br></p><h4 id=\"hdbc4104eb7\">登録処理</h4><ul><li>Stripeへクレジットカード情報を登録します</li><li>あくまで、利用するアプリケーションはカード情報を非保持化となりますので、FE（フロントエンド）にてStripeから払い出されたトークンをBE（バックエンド）にPOSTし、そのトークンに対して、Stripeが提供しているAPIをコールすることになります</li></ul><p><br></p><pre><code>override fun saveStripePaymentMethod(stripePaymentMethodSaveCommand: StripePaymentMethodSaveCommand) {\n    val createParams = mapOf(\"source\" to stripePaymentMethodSaveCommand.stripeToken)\n    Customer.create(createParams)\n}</code></pre><ul><li>ライブラリのCustomerクラスのcreateメソッドに対して、パラメータを渡すことで、ライブラリ内で、stripeのAPIがコールされ、クレジットカード情報が登録されます</li></ul><p><br></p><h4 id=\"h7e9c8b8d60\">取得処理</h4><ul><li>Stripeにユーザ（カスタマー）が登録されると、カスタマーIDが払い出されることになります</li><li>カスタマーIDをパラメータとして、受け取って、カード情報を全て取得します</li></ul><pre><code>override fun getStripePaymentMethods(stripePaymentMethodGetCommand: StripePaymentMethodGetCommand): StripeCardDto {\n    // 登録されているカード情報を全て取得する\n    val paymentMethodListParams =\n        mapOf(\"customer\" to stripePaymentMethodGetCommand.customerId, \"type\" to \"card\")\n    val cards = PaymentMethod.list(paymentMethodListParams)\n    // デフォルトのカード情報を取得したいため、customer取得\n    val customer = Customer.retrieve(stripePaymentMethodGetCommand.customerId)\n    return StripeCardDto(customer, cards)\n}</code></pre><ul><li>StripeのAPIレスポンスに対して、クレンジングを実施し、DTOに詰めています</li></ul><p><br></p><h5 id=\"haccb5a4648\">クレンジング処理</h5><p>StripeCardInfoDto.kt</p><pre><code>data class StripeCardInfoDto(\n    val cardId: String,\n    val brand: String,\n    val expMonth: Long,\n    val expYear: Long,\n    val last4: String\n) {\n    constructor(paymentMethod: PaymentMethod) : this(\n        paymentMethod.id,\n        paymentMethod.card.brand,\n        paymentMethod.card.expMonth,\n        paymentMethod.card.expYear,\n        paymentMethod.card.last4\n    )\n}</code></pre><p><br>StripeCardDto.kt</p><pre><code>data class StripeCardDto(\n    val customerId: String,\n    val defaultSource: String?,\n    val cards: List&lt;StripeCardInfoDto&gt;\n) {\n    constructor(customer: Customer, paymentMethodCollection: PaymentMethodCollection) : this(\n        customer.id,\n        customer.defaultSource,\n        paymentMethodCollection.data.map { StripeCardInfoDto(it) }\n    )\n}</code></pre><ul><li>上述のようにクレンジングし、詰め替えたDTOを呼び出し元であるコントローラーに返却したサンプルレスポンスとしては、下記のようになります</li><li>defaultSourceは、主となるクレジットカードです（複数クレジットカードの登録がある場合に、どのカードがデフォルトであるかです）</li></ul><p><br></p><pre><code>{\n&nbsp; &nbsp; \"customerId\": \"cus_LXXXX\",\n&nbsp; &nbsp; \"defaultSource\": \"card_1xxxxx\",\n&nbsp; &nbsp; \"cards\": [\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"cardId\": \"card_1xxxxx\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"brand\": \"visa\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"expMonth\": 4,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"expYear\": 2023,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"last4\": \"4242\"\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; ]\n}</code></pre><p><br></p><h4 id=\"hc621a607d4\">更新処理</h4><ul><li>Stripeにユーザ（カスタマー）が登録されると、カスタマーIDが払い出されることになります</li><li>カスタマーIDと変更情報（トークン）をパラメータとして、受け取って、それを下記のようにコールします</li></ul><pre><code>override fun updateStripePaymentMethod(stripePaymentMethodUpdateCommand: StripePaymentMethodUpdateCommand) {\n    val resource = Customer.retrieve(stripePaymentMethodUpdateCommand.customerId)\n    val updateParams = mapOf(\"source\" to stripePaymentMethodUpdateCommand.stripeToken)\n    resource.update(updateParams)\n}</code></pre><p><br></p><h4 id=\"h08936c5bbc\">削除処理　※正確には、紐づいているカード情報を無効化</h4><ul><li>削除したいカードIDをパラメータとして、受け取って、それを下記のようにコールします</li><li>StripeのAPIを参照すると、カード情報を削除するAPIもあるのですが、今回は、こちらを使いました</li></ul><pre><code>override fun detachStripePaymentMethod(stripePaymentMethodDetachCommand: StripePaymentMethodDetachCommand) {\n    val paymentMethod = PaymentMethod.retrieve(stripePaymentMethodDetachCommand.cardId)\n    paymentMethod.detach()\n}</code></pre><p><br></p><h4 id=\"h1963ac2e2a\">支払い処理</h4><ul><li>金額、カスタマーID、カードIDをパラメータで受け取って、それを下記のようにコールします</li></ul><pre><code>override fun chargeCustomerCard(stripeChargeCustomerCardCommand: StripeChargeCustomerCardCommand) {\n    val chargeParams = mapOf(\n        \"amount\" to stripeChargeCustomerCardCommand.amount,\n        \"currency\" to \"jpy\",\n        \"customer\" to stripeChargeCustomerCardCommand.customerId,\n        \"source\" to stripeChargeCustomerCardCommand.cardId\n    )\n    Charge.create(chargeParams)\n}</code></pre><p><br>という感じです！<br>Stripeのカスタマーとアプリケーションのユーザ情報を紐付けるなどは、必要になると思っていますが、ひと通り、機能に必要な実装はこちらで良いかなと思います！（返金処理も作らないとですが）<br>Javaの実装サンプル記事は目にしますが、サーバサイドKotlinの実装サンプルはあまり見なかったので、実装に際して、構えていましたが、基本はJavaなので、Kotlinに置き換えて実装すれば出来ました！<br><br>簡単ですが、以上です！<br>お読みいただきまして、ありがとうございました。<br><br>弊社では、エンジニアを募集しています！お気軽にご連絡ください！<br><br><a href=\"https://www.matisse.co.jp/\" target=\"_blank\" rel=\"noopener noreferrer\">株式会社マチス教育システム</a>まで<br><br><br></p>",
      "featuredImage": {
        "url": "https://images.microcms-assets.io/assets/e49c71d8e1b34655805aded5af66fa22/67a3766d2a47424f817aa2ed20971cce/Kotlin_Icon.png",
        "height": 1024,
        "width": 1024,
      },
      "categories": [
        {
          "id": "technology-introduction",
          "createdAt": "2022-04-10T06:33:02.126Z",
          "updatedAt": "2022-04-10T06:33:02.126Z",
          "publishedAt": "2022-04-10T06:33:02.126Z",
          "revisedAt": "2022-04-10T06:33:02.126Z",
          "categoryName": "技術紹介",
        },
      ],
      "tags": [],
      "metaDesc": "ECサイトの決済手段として、クレジットカードを提供するため、Stripeを選定しました。"
    },
    {
      "id": "g6mzcd99m",
      "toc_visible":true,
      "createdAt": "2022-04-15T01:21:27.501Z",
      "updatedAt": "2022-04-28T03:52:53.056Z",
      "publishedAt": "2022-04-15T01:21:27.501Z",
      "revisedAt": "2022-04-28T03:52:53.056Z",
      "title": "Matisse Tech Blogを作りました！",
      "author": "Sekine",
      "contents": "<p>こんにちは。WebエンジニアのSekineです。<br>以前から会社のテックブログを作りたかったのですが、今回、時間を作って、まずはミニマムで作ってみました。<br>実際に業務などで使ったことはないのですが、ヘッドレスCMSに興味を持っており、テックブログでは、<a href=\"https://microcms.io/\" target=\"_blank\" rel=\"noopener noreferrer\">microCMS</a>を選定してみました。<br><br>他の記事でもありますが、構成としては、下記のアークテクチャとしています。<br>microCMSには、用意されている管理画面から記事を入稿となります。<br><br><img src=\"https://images.microcms-assets.io/assets/e49c71d8e1b34655805aded5af66fa22/2747bd5186224beb9ecdaae61e94c1cf/tech-blog-system.png\" alt=\"\"><br></p><h2 id=\"h23061a5cab\">技術構成</h2><h3 id=\"h5dc0967264\">フロントエンド</h3><p><br>create-next-appにて開発用のテンプレートを落としてから開発をスタートしましたが、Next12、React18となっていることにテンションが上がりました。<br>ただ、自身ではまだその部分の有効活用などができていないので、今後キャッチアップしていきたいと思っています！<br></p><h4 id=\"hd3e08a5cc6\">UIライブラリ</h4><p><br>以前は、Material UIを使っていたのですが、ライブラリで用意されているコンポーネントへの依存度が強まること、デザイナーのUI/UXに対する実装のしやすさがメリットと考えて、本テックブログも選定していますが、直近のWebアプリからは、<a href=\"https://tailwindcss.jp/\" target=\"_blank\" rel=\"noopener noreferrer\">Tailwind CSS</a>を活用するようにしました。<br></p><h4 id=\"hb097fc86c5\">BEとの繋ぎ込み</h4><p><br>クライアントサイドからコールするのではなく、Nextの機能を使って、サーバサイドである/pages/api配下からコールするようにしています。<br><br></p><h3 id=\"ha2cc149486\">バックエンド</h3><p><br>APIのスキーマ定義をして、ブログの入稿を実施するだけなので、本当に便利だと思いました！<br><br></p><h2 id=\"hcbec2bf0d9\">終わりに</h2><p><br>テックブログを通じて、同じチームや社員間の知見共有及び連携が、より強化されることや投稿された記事が皆様の何かの手助けになれるようにやっていきたいと思いました！<br>なお、本記事に紹介した構成であれば、個人のブログなどもフロントエンドが出来れば、サクッと出来てしまうので、おすすめです！！<br><br>最後までお読みいただき、ありがとうございました。<br><br>弊社では、Webエンジニアを募集しておりますので、是非ご連絡ください！！<br><br><a href=\"https://www.matisse.co.jp/\" target=\"_blank\" rel=\"noopener noreferrer\">株式会社マチス教育システム</a></p>",
      "featuredImage": {
        "url": "https://images.microcms-assets.io/assets/e49c71d8e1b34655805aded5af66fa22/be460e0526c64c52ac1aa0e4c75112bb/jamstack.png",
        "height": 110,
        "width": 458,
      },
      "categories": [
        {
          "id": "technology-introduction",
          "createdAt": "2022-04-10T06:33:02.126Z",
          "updatedAt": "2022-04-10T06:33:02.126Z",
          "publishedAt": "2022-04-10T06:33:02.126Z",
          "revisedAt": "2022-04-10T06:33:02.126Z",
          "categoryName": "技術紹介",
        },
      ],
      "tags": [],
      "metaDesc": "以前から会社のテックブログを作りたかったのですが、今回、時間を作って、まずはミニマムで作ってみました。"
    },
  ],
  "totalCount": 3,
  "offset": 0,
  "limit": 10,
};
